<!DOCTYPE html>
<html>

<head>
   <script src="https://unpkg.com/mathjs/lib/browser/math.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
   <script src="https://d3js.org/d3.v7.min.js"></script>
   <style>
      body {
         margin: 0;
         overflow: hidden;
         font-family: Helvetica, sans-serif;
      }
   </style>
</head>
<!-- Create a div where the graph will take place -->
<div id="my_datavisualization">

</div>

<body>
   <script>
      // Get the viewport height and width
      const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
      const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)

      var height = vh;
      var width = vw;


      function gaussianRandom(mean = 0, stdev = 0.1) {
         const u = 1 - Math.random(); // Converting [0,1) to (0,1]
         const v = Math.random();
         const z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
         // 
         return z * stdev + mean;
         // return 
      }

      // TODO!: I need to create a function that will linearly map the x and y values to the x and y axis
      // Current problem with the code, it assumes straight lines, e.g. x_axis has height of 0, y_axis has width of 0
      function x_axis_limit(x_orig, x_sample) {
         // I get x + width, convert to location of x axis
         x0 = x_orig.x
         x1 = x0 + x_orig.width

         middle_point = x_orig.width / 2

         // map x_sample to values between x0 and x1
         x = x0 + x_sample * (x1 - x0)

         return x + middle_point;
      }
      function y_axis_limit(y_orig, y_sample) {
         // I get x + width, convert to location of x axis
         y0 = y_orig.y
         y1 = y0 + y_orig.height

         middle_point = y_orig.height / 2

         // map x_sample to values between x0 and x1
         y = y0 + y_sample * (y1 - y0)

         return y + middle_point;
      }
      // First read and add the image
      const my_svg = d3.svg("https://raw.githubusercontent.com/TeachBooks/interactive-figures/refs/heads/main/Proof-of-concept/Templates/template.svg") // read the template

      my_svg.then(data => {
         d3.select("#my_datavisualization").node().append(data.documentElement); // append the svg to the div element
         var x_axis = d3.select('path#x'); // select the path element with id 'x'
         var y_axis = d3.select('path#y'); // select the path element with id 'y'
         var image = d3.select('g');

         // fancy rainbow color for x axis
         const timer = d3.timer(() => x_axis.style("stroke", d3.interpolateRainbow(Date.now() / 10000)));
         // define a function that will draw a point on the graph
         samples = [];

         for (i = 0; i < 250; i++) {
            samples.push([gaussianRandom(), gaussianRandom()])
            // TODO!: Convert this piece of code to a scatter plot, e.g. plot.scatter(x,y). The (samples[i][0], samples[i][1]) are now x and y values
            image.append("circle")
               .attr("cx", x_axis_limit(x_axis.node().getBBox(), samples[i][0]))
               .attr("cy", y_axis_limit(y_axis.node().getBBox(), samples[i][1]))
               .attr("r", height * 0.001)
               .style("fill", "#666")
               .style("stroke", "None")
               .attr("id", "scatter" + i.toString())
               .attr("class", "scatter")
               .lower()
         }
         // TODO!: Create line plot, e.g. plot.line(x,y). The (samples[i][0], samples[i][1]) being x and y values
         function change_n(n){
            // Remove lines before running the loop
            d3.selectAll(".line").remove()

            for (i = 0; i < n; i++) {
               image.append('line')
                  .attr("x1", x_axis_limit(x_axis.node().getBBox(), samples[i][0]))
                  .attr("y1", y_axis_limit(y_axis.node().getBBox(), samples[i][1]))
                  .attr("x2", x_axis_limit(x_axis.node().getBBox(), samples[(i + 1)][0]))
                  .attr("y2", y_axis_limit(y_axis.node().getBBox(), samples[(i + 1)][1]))
                  .style("stroke", "red")
                  .style("stroke-width", height * 0.001)
                  .attr("id", "line")
                  .attr("class", "line")
                  .lower()
            }
         }

         // Create a handle... TODO: 
         var handle_mean = image.append("circle")
            .attr("cx", x_axis_limit(x_axis.node().getBBox(), -0.5))
            .attr("cy", y_axis_limit(y_axis.node().getBBox(), -0.5))
            .attr("r", height * 0.005)
            .attr("fill", "#8c000f")
            .call(d3.drag() // call specific function when circle is dragged
               .on("drag", function (event) {

                  console.log("dragging")
                  console.log(event.x)
                  
                  // Get the movement and the current object
                  // var movex = d3.event.x;
                  // var movey = d3.event.y;
                  var current = d3.select(this);
                  
                  // // Limit movex, if necessary
                  // if (movex < window_left_x[0]) {
                  //    movex = window_left_x[0]
                  // } else if (movex > window_left_x[1]) {
                  //    movex = window_left_x[1]
                  // }

                  // // Limit movey, if necessary
                  // if (movey < window_left_y[0]) {
                  //    movey = window_left_y[0]
                  // } else if (movey > window_left_y[1]) {
                  //    movey = window_left_y[1]
                  // }

                  // Update drag handle position
                  current.style("cx", event.x)

                  if (event.x > 0) {
                     change_n(Math.floor(event.x))
                  }
                  // current.style("cy", movey)

                  // Update mean
                  // mu = [movex, movey];

                  // // Update the other handles
                  // d3.select("#handle_sigma_x").attr("cx", xScale_left(mu[0] + 2 * sigma_x))
                  // d3.select("#handle_sigma_x").attr("cy", yScale_left(mu[1]))
                  // d3.select("#handle_sigma_y").attr("cx", xScale_left(mu[0]))
                  // d3.select("#handle_sigma_y").attr("cy", yScale_left(mu[1] + 2 * sigma_y))
                  // d3.select("#handle_correlation").attr("cx", xScale_left(mu[0] + math.cos(correlation_to_angle(correlation)) * 1.5))
                  // d3.select("#handle_correlation").attr("cy", yScale_left(mu[1] + math.sin(correlation_to_angle(correlation)) * 1.5))

                  // // Update the paths
                  // d3.select("#line_correlation").attr("transform", "translate(" + (xScale_left(mu[0])).toString() + "," + (yScale_left(mu[1])).toString() + ")")
                  // d3.select("#line_sigma_x")
                  //    .attr("x1", xScale_left(mu[0]))
                  //    .attr("x2", xScale_left(mu[0] + 2 * sigma_x))
                  //    .attr("y1", yScale_left(mu[1]))
                  //    .attr("y2", yScale_left(mu[1]));
                  // d3.select("#line_sigma_y")
                  //    .attr("x1", xScale_left(mu[0]))
                  //    .attr("x2", xScale_left(mu[0]))
                  //    .attr("y1", yScale_left(mu[1]))
                  //    .attr("y2", yScale_left(mu[1] + 2 * sigma_y));

                  // d3.select("#text-mean")
                  //    .text("(" + d3.format(".2f")(mu[0]) + "," + d3.format(".2f")(mu[1]) + ")");


                  // update();

               }));


      }); //appends the svg (document) to the selected div element...

      // Some key points:
      // 1. I think I am using a newer d3 version... originally they said path_el should be adjusted via path_el.attr(...)
      // 2. using then key word loads the image asynchronously... hence why the timer is also within then keyword now
      // 3. Gotta have 'wait_for_svg' function, then we're in business

      // I can do d3.select('svg').node() which returns the svg image...




   </script>
</body>

</html>